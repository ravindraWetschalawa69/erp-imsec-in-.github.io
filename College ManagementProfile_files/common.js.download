var app = angular.module("User", ["angularFileUpload", "angularFileUpload1", "ngRoute", "ngSanitize", "ngProgress", "angular-datepicker", "chart.js", "textAngular", 'ui.bootstrap', 'gantt', 'mgcrea.ngStrap', 'ui.select2', 'ngTagsInput'], function($httpProvider) {
	$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';
	var param = function(obj) {
		var query = '', name, value, fullSubName, subName, subValue, innerObj, i;
		for(name in obj) {
			value = obj[name];
			if(value instanceof Array) {
				for(i=0; i<value.length; ++i) {
					subValue = value[i];
					fullSubName = name + '[' + i + ']';
					innerObj = {};
					innerObj[fullSubName] = subValue;
					query += param(innerObj) + '&';
				}
			} else if(value instanceof Object) {
				for(subName in value) {
					subValue = value[subName];
					fullSubName = name + '[' + subName + ']';
					innerObj = {};
					innerObj[fullSubName] = subValue;
					query += param(innerObj) + '&';
				}
			} else if(value !== undefined && value !== null)
				query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
		}
		return query.length ? query.substr(0, query.length - 1) : query;
	};
	
	$httpProvider.defaults.transformRequest = [function(data) {
		return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;
	}];
});

app.filter('nl2br', function() {
    var span = document.createElement('span');
    return function(input) {
        if (!input) return input;
        var lines = input.split('\n');

        for (var i = 0; i < lines.length; i++) {
            span.innerText = lines[i].replace("&#39;", "'");
            span.textContent = lines[i].replace("&#39;", "'");  //for Firefox
            lines[i] = span.innerHTML;
        }
        return lines.join('<br />');
    }
});

app.filter('decodeApostrophy', function() {
    return function(input) {
        return input.replace("&#39;", "'");
    }
});

app.factory("loading", function(ngProgress) {											   
    var obj = {};
	ngProgress.color('#81D742');
	ngProgress.height('5px');
    obj.start = function(){
    	ngProgress.start();  
	};
    obj.finish = function(){
        ngProgress.stop();
		ngProgress.complete();
    };
	return obj;
});

app.filter('gantRowLabel', function() {
    return function(row) {
		//console.log(new Date(row.id));
		//var objDate = new Date().toLocaleString("en-us", { month: "long" }); // result: August
		//console.log(objDate);
		//var objDate = new Date().toLocaleString("en-us", { month: "short" }); // result: Aug

		var date = new Date(row.id);
		var html = '<div class="a2" align="left">' + row.name + '<br>' + date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + '</div>';
		html += '<div class="a3"><i class="glyphicon caret a33"></i><div class="a4"><ul><li class="copy">Copy Last ' + row.name + '\'s Schedule</li><li class="delete">Delete ' + row.name + '\'s Schedule</li></ul></div></div>';
		return html;
		//return input;
    }
});
app.filter('range', function() 
	{
    return function(list, total) {
      total = parseInt(total, 10);
      
      for (var i = 0; i <= total; i++) {
        list.push(i);
      }
      return list;
    };
  });
app.service('fileUpload', ['$http', function ($http) {
    this.uploadFileToUrl = function(file, uploadUrl){
        var fd = new FormData();
        fd.append('file', file);
        $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        })
        .success(function(){
        })
        .error(function(){
        });
    }
}]);

var objectToQueryString = function(obj) {
	var query = '', name, value, fullSubName, subName, subValue, innerObj, i;
	for(name in obj) {
		value = obj[name];
		if(value instanceof Array) {
			for(i=0; i<value.length; ++i) {
				subValue = value[i];
				fullSubName = name + '[' + i + ']';
				innerObj = {};
				innerObj[fullSubName] = subValue;
				query += objectToQueryString(innerObj) + '&';
			}
		} else if(value instanceof Object) {
			for(subName in value) {
				subValue = value[subName];
				fullSubName = name + '[' + subName + ']';
				innerObj = {};
				innerObj[fullSubName] = subValue;
				query += objectToQueryString(innerObj) + '&';
			}
		} else if(value !== undefined && value !== null) {
			query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
		}
	}
	return query.length ? query.substr(0, query.length - 1) : query;
};

app.controller("MainCtrl", function($scope, $templateCache, loading, $location) {
	$scope.$on('$routeChangeStart', function(){
		var ganttCache = $templateCache.get('template/default.gantt.tmpl.html');
		$templateCache.removeAll();
		$templateCache.put('template/default.gantt.tmpl.html', ganttCache);
		loading.start();
	});
	
	$scope.$on('$routeChangeSuccess', function(){
		loading.finish();
		window.scrollTo(0, 0);
	});
  
	$scope.isActive = function (viewLocation) {
		var indexOfLastSlash = $location.path().lastIndexOf("/");
		if(indexOfLastSlash != 0) {
			return viewLocation === $location.path().substr(0, indexOfLastSlash);
		}
        return viewLocation === $location.path();
    };
	
	$scope.goToPage = function(page) {
		path = $location.path();
		if(path.indexOf("/page") != -1) {
			path = path.substr(0, path.lastIndexOf("/"));
		}
		path = path + '/page' + page;
		$location.path(path);
	};
});

//for numeric validation, which used to any file on keypress event.
function validateNumbers(e){
	 if (e.which != 8 && e.which != 13 && e.which != 0 && e.which != 46 && e.which != 31 && (e.which < 48 || e.which > 57)) {
		return false;	    
	}
}
//for numeric validation with comma, which used to any file on keypress event.
function validateNumbersWithComma(e){
	 if (e.which != 8 && e.which != 13 && e.which != 0 && e.which != 46 && e.which != 31 && e.which != 44 && (e.which < 48 || e.which > 57)) {
		return false;	    
	}
}
//for numeric validation with multiply sign, which used to any file on keypress event.
function validateNumbersWithMultiplySymbol(e){
	 if (e.which != 8 && e.which != 13 && e.which != 0 && e.which != 46 && e.which != 31 && e.which != 42 && (e.which < 48 || e.which > 57)) {
		return false;	    
	}
}
function validateNumbersWithNegative(e){
	console.log(e.which);
	 if (e.which != 8 && e.which != 13 && e.which != 0 && e.which != 46 && e.which != 31 && e.which != 45 && (e.which < 48 || e.which > 57)) {
		return false;	    
	}
}

//for test validation, which used to any file on keypress event.
function validateAlphabetsOnly(e){//console.log(e.which);
	 if (e.which != 8 && e.which != 13 && e.which != 0 && e.which != 46 && e.which != 31 && e.which != 32 && ((e.which < 65 || e.which > 90) && (e.which < 97 || e.which > 122))) {
		return false;	    
	}
}

function round(value, exp) {
  if (typeof exp === 'undefined' || +exp === 0)
    return Math.round(value);

  value = +value;
  exp = +exp;

  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))
    return NaN;

  // Shift
  value = value.toString().split('e');
  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));

  // Shift back
  value = value.toString().split('e');
  return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));
}